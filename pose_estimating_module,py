import cv2 as cv
import mediapipe as mp
import time

class Position_tracker():
    def __init__(self,mode=False, upper_body_only=False, smooth_landmarks=True ,detetctionCon=0.5, trackingCon=0.5):
        """initializes all the neccessary things"""
        self.mode=mode
        self.upper_body_only=upper_body_only
        self.smooth=smooth_landmarks
        self.detetctionCon=detetctionCon
        self.trackingCon=trackingCon

        self.poseEst = mp.solutions.pose
        self.pose = self.poseEst.Pose(self.mode, self.upper_body_only, self.smooth, self.detetctionCon, self.trackingCon)
        self.mpDraw = mp.solutions.drawing_utils

    
    def get_hands(self,RGB_img,img,draw_pose=True):
        """detects, traces and draws pose"""
        img.flags.writeable = False
        self.results = self.pose.process(RGB_img)
        img.flags.writeable = True

        if self.results.pose_landmarks:
            if draw_pose:
                self.mpDraw.draw_landmarks(img,self.results.pose_landmarks,self.poseEst.POSE_CONNECTIONS)
        
        return img

    def find_positions(self, img, draw=True):
        """gets the indivisual points present of the body"""
        # creating a landmark list to store the landmarks
        self.landmark_list = []
        if self.results.pose_landmarks:
            # detects points on multiple hands
            for id, pose_landmarks in enumerate(self.results.pose_landmarks.landmark):
                h, w, c = img.shape
            
                cx, cy = int(pose_landmarks.x*w), int(pose_landmarks.y*h)

                # appending values to landmark_list
                self.landmark_list.append([id,cx,cy])
        
        return self.landmark_list
    

def main():
    capture = cv.VideoCapture(0)

    tracker = Position_tracker()

    previous_time = 0
    current_time = 0

    while True:
        isTrue, img = capture.read()
        RGB_img = cv.cvtColor(img,cv.COLOR_BGR2RGB)

        # FPS logic
        current_time = time.time()
        fps = 1/(current_time-previous_time)
        previous_time = current_time

        img = tracker.get_hands(RGB_img,img,True)
        landmarks = tracker.find_positions(img,draw=True)
        if len(landmarks)!=0:
            pass
            #print(landmarks)
    
        # fliping the image so it doesn't get displayed inverted
        img = cv.flip(img,1)

        # displaying FPS
        cv.putText(img,f"FPS:{str(int(fps))}",(20,50),cv.FONT_HERSHEY_SIMPLEX,2,(156,222,27),2)

   
        cv.imshow("win",img)
        if cv.waitKey(1) == ord('q'):
            break

if __name__ == "__main__":
    main()